{
	"$schema": "https://biomejs.dev/schemas/2.2.5/schema.json",
	"css": {
		"formatter": {
			"enabled": true
		},
		"linter": {
			"enabled": true
		}
	},
	"grit": {
		"formatter": {
			"enabled": true
		}
	},
	"html": {
		"formatter": {
			"enabled": true
		}
	},
	"javascript": {
		"formatter": {
			// Omit semicolons to reduce noise and improve readability.
			// Rely fully on automatic semicolon insertion (ASI). Using semicolons does not disable the ASI behaviour anyway.
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion
			// https://slides.com/evanyou/semicolons
			"semicolons": "asNeeded"
		}
	},
	"assist": {
		"actions": {
			"source": {
				"organizeImports": {
					"level": "on",
					"options": {
						"groups": [
							// Module mock imports must come before regular imports to make them interceptable and able to replace any later imports with mocks.
							["**/*.mocks", "**/*.mocks.*"],
							//
							":URL:",
							[":BUN:", ":NODE:", ":PACKAGE_WITH_PROTOCOL:"],
							":PACKAGE:",
							":ALIAS:",
							":PATH:"
						]
					}
				}
			}
		}
	},
	"formatter": {
		"useEditorconfig": true
	},
	"linter": {
		"rules": {
			"a11y": {
				"noAccessKey": "warn",
				"noAriaHiddenOnFocusable": "warn",
				"noAriaUnsupportedElements": "warn",
				"noAutofocus": "warn",
				"noDistractingElements": "warn",
				"noHeaderScope": "warn",
				"noInteractiveElementToNoninteractiveRole": "warn",
				"noLabelWithoutControl": "warn",
				"noNoninteractiveElementInteractions": "warn",
				"noNoninteractiveElementToInteractiveRole": "warn",
				"noNoninteractiveTabindex": "warn",
				"noPositiveTabindex": "warn",
				"noRedundantAlt": "warn",
				"noRedundantRoles": "warn",
				"noStaticElementInteractions": "warn",
				"noSvgWithoutTitle": "warn",
				"useAltText": "warn",
				"useAnchorContent": "warn",
				"useAriaActivedescendantWithTabindex": "warn",
				"useAriaPropsForRole": "warn",
				"useAriaPropsSupportedByRole": "warn",
				"useButtonType": "warn",
				"useFocusableInteractive": "warn",
				"useGenericFontNames": "warn",
				"useHeadingContent": "warn",
				"useHtmlLang": "warn",
				"useIframeTitle": "warn",
				"useKeyWithClickEvents": "warn",
				"useKeyWithMouseEvents": "warn",
				"useMediaCaption": "warn",
				"useSemanticElements": "warn",
				"useValidAnchor": "warn",
				"useValidAriaProps": "warn",
				"useValidAriaRole": "warn",
				"useValidAriaValues": "warn",
				"useValidAutocomplete": "warn",
				"useValidLang": "warn"
			},
			"complexity": {
				"noAdjacentSpacesInRegex": "warn",
				"noArguments": "warn",
				"noBannedTypes": "warn",
				"noCommaOperator": "warn",
				"noEmptyTypeParameters": "warn",
				"noExcessiveCognitiveComplexity": "warn",
				"noExcessiveLinesPerFunction": "off", // Rely on `lint/complexity/noExcessiveCognitiveComplexity` instead.
				"noExcessiveNestedTestSuites": "off", // Not applicable outside unit tests.
				"noExtraBooleanCast": "warn",
				"noFlatMapIdentity": "warn",
				"noForEach": "warn",
				"noImplicitCoercions": "warn",
				"noImportantStyles": "warn",
				"noStaticOnlyClass": "warn",
				"noThisInStatic": "warn",
				"noUselessCatch": "warn",
				"noUselessConstructor": "warn",
				"noUselessContinue": "warn",
				"noUselessEmptyExport": "warn",
				"noUselessEscapeInRegex": "warn",
				"noUselessFragments": "warn",
				"noUselessLabel": "warn",
				"noUselessLoneBlockStatements": "warn",
				"noUselessRename": "warn",
				"noUselessStringConcat": "warn",
				"noUselessStringRaw": "warn",
				"noUselessSwitchCase": "warn",
				"noUselessTernary": "warn",
				"noUselessThisAlias": "warn",
				"noUselessTypeConstraint": "warn",
				"noUselessUndefinedInitialization": "warn",
				"noVoid": "warn",
				"useArrowFunction": "warn",
				"useDateNow": "warn",
				"useFlatMap": "warn",
				"useIndexOf": "warn",
				"useLiteralKeys": "warn",
				"useNumericLiterals": "warn",
				"useOptionalChain": "warn",
				"useRegexLiterals": "warn",
				"useSimpleNumberKeys": "warn",
				"useSimplifiedLogicExpression": "warn",
				"useWhile": "warn"
			},
			"correctness": {
				"noChildrenProp": "warn",
				"noConstAssign": "warn",
				"noConstantCondition": "warn",
				"noConstantMathMinMaxClamp": "warn",
				"noConstructorReturn": "warn",
				"noEmptyCharacterClassInRegex": "warn",
				"noEmptyPattern": "warn",
				"noGlobalDirnameFilename": "warn",
				"noGlobalObjectCalls": "warn",
				"noInnerDeclarations": "warn",
				"noInvalidBuiltinInstantiation": "warn",
				"noInvalidConstructorSuper": "warn",
				"noInvalidDirectionInLinearGradient": "warn",
				"noInvalidGridAreas": "warn",
				"noInvalidPositionAtImportRule": "warn",
				"noInvalidUseBeforeDeclaration": "warn",
				"noMissingVarFunction": "warn",
				"noNestedComponentDefinitions": "warn",
				"noNodejsModules": "warn",
				"noNonoctalDecimalEscape": "warn",
				"noPrecisionLoss": "warn",
				"noPrivateImports": "warn",
				"noProcessGlobal": "warn",
				"noReactPropAssignments": "warn",
				"noRenderReturnValue": "warn",
				"noRestrictedElements": "warn",
				"noSelfAssign": "warn",
				"noSetterReturn": "warn",
				"noSolidDestructuredProps": "warn", // Prefer consistent use of props in JSX components, including React components.
				"noStringCaseMismatch": "warn",
				"noSwitchDeclarations": "warn",
				"noUndeclaredDependencies": {
					"level": "warn",
					"options": {
						"devDependencies": false // Disallow importing development-only dependencies in production code.
					}
				},
				"noUndeclaredVariables": "warn",
				"noUnknownFunction": "warn",
				"noUnknownMediaFeatureName": "warn",
				"noUnknownProperty": "warn",
				"noUnknownPseudoClass": "warn",
				"noUnknownPseudoElement": "warn",
				"noUnknownTypeSelector": "warn",
				"noUnknownUnit": "warn",
				"noUnmatchableAnbSelector": "warn",
				"noUnreachable": "warn",
				"noUnreachableSuper": "warn",
				"noUnsafeFinally": "warn",
				"noUnsafeOptionalChaining": "warn",
				"noUnusedFunctionParameters": "warn",
				"noUnusedImports": {
					"level": "warn",
					"fix": "safe", // Let Biome clean up unused imports automatically.
					"options": {}
				},
				"noUnusedLabels": "warn",
				"noUnusedPrivateClassMembers": "warn",
				"noUnusedVariables": "warn",
				"noVoidElementsWithChildren": "warn",
				"noVoidTypeReturn": "warn",
				"useExhaustiveDependencies": "off", // Not applicable outside React.
				"useGraphqlNamedOperations": "warn",
				"useHookAtTopLevel": "off", // Not applicable outside React.
				"useImportExtensions": "warn",
				"useIsNan": "warn",
				"useJsonImportAttributes": "warn",
				"useJsxKeyInIterable": "warn",
				"useParseIntRadix": "warn",
				"useSingleJsDocAsterisk": "warn",
				"useUniqueElementIds": "off", // Allow hard-coded element ids to make it easier to integrate with third-party libraries that expect specific ids.
				"useValidForDirection": "warn",
				"useValidTypeof": "warn",
				"useYield": "warn"
			},
			"performance": {
				"noAccumulatingSpread": "warn",
				"noAwaitInLoops": "warn",
				"noBarrelFile": "warn",
				"noDelete": "warn",
				"noDynamicNamespaceImportAccess": "warn",
				"noImgElement": "off", // Not applicable outside Next.js.
				"noNamespaceImport": "warn",
				"noReExportAll": "warn",
				"noUnwantedPolyfillio": "warn",
				"useGoogleFontPreconnect": "warn",
				"useSolidForComponent": "off", // Not applicable outside Solid.
				"useTopLevelRegex": "warn"
			},
			"security": {
				"noBlankTarget": "warn",
				"noDangerouslySetInnerHtml": "warn",
				"noDangerouslySetInnerHtmlWithChildren": "warn",
				"noGlobalEval": "warn"
			},
			"style": {
				"noCommonJs": "warn",
				"noDefaultExport": "warn",
				"noDescendingSpecificity": "warn",
				"noDoneCallback": "warn",
				"noEnum": "warn",
				"noExportedImports": "warn",
				"noHeadElement": "warn",
				"noImplicitBoolean": "off", // Prefer HTML-like boolean props in JSX.
				"noInferrableTypes": "warn",
				"noMagicNumbers": "off", // Allow magic numbers. Having to declare and name constants for magic numbers results in larger cognitive overhead and may sometimes also hurt readability (even though the opposite was intended) when the names are too vague or too descriptive.
				"noNamespace": "warn",
				"noNegationElse": "warn",
				"noNestedTernary": "off", // Rely on `lint/complexity/noExcessiveCognitiveComplexity` instead.
				"noNonNullAssertion": "warn",
				"noParameterAssign": "warn",
				"noParameterProperties": "warn",
				"noProcessEnv": "warn",
				"noRestrictedGlobals": "warn",
				"noRestrictedImports": "warn",
				"noRestrictedTypes": "warn",
				"noShoutyConstants": "warn",
				"noSubstr": "warn",
				"noUnusedTemplateLiteral": "warn",
				"noUselessElse": "warn",
				"noValueAtRule": "warn",
				"noYodaExpression": "warn",
				"useArrayLiterals": "warn",
				"useAsConstAssertion": "warn",
				"useAtIndex": "warn",
				"useBlockStatements": "warn",
				"useCollapsedElseIf": "warn",
				"useCollapsedIf": "warn",
				"useComponentExportOnlyModules": "warn",
				"useConsistentArrayType": {
					"level": "warn",
					"fix": "safe", // Let Biome correct the type automatically to reduce the workload when copy-pasting code (e.g. generated by AI) that uses a different style.
					"options": { "syntax": "generic" } // Prefer `Array<T>` to remain consistent with the built-in types for `Set<T>` and `Map<K, V>`.
				},
				"useConsistentBuiltinInstantiation": "warn",
				"useConsistentCurlyBraces": "warn",
				"useConsistentMemberAccessibility": "warn",
				"useConsistentObjectDefinitions": {
					"level": "warn",
					"options": {
						"syntax": "shorthand" // Prefer the shorthand syntax to reduce noise and improve readability.
					}
				},
				"useConst": "warn",
				"useDefaultParameterLast": "warn",
				"useDefaultSwitchClause": "off", // Rely on exhaustiveness checks in TypeScript to reduce noise and improve readability.
				"useDeprecatedReason": "warn",
				"useEnumInitializers": "warn",
				"useExplicitLengthCheck": "warn",
				"useExponentiationOperator": "warn",
				"useExportType": "warn",
				"useExportsLast": "off", // Prefer a top-down declaration order like the Stepdown Rule (see 'Clean Code' by Robert C. Martin a.k.a. 'Uncle Bob').
				"useFilenamingConvention": {
					"level": "warn",
					"options": {
						"filenameCases": ["PascalCase"] // Allow PascalCase as the only case to keep the naming convention simple and consistent.
					}
				},
				"useForOf": "warn",
				"useFragmentSyntax": "warn",
				"useGraphqlNamingConvention": "warn",
				"useGroupedAccessorPairs": "warn",
				"useImportType": "warn",
				"useLiteralEnumMembers": "warn",
				"useNamingConvention": {
					"level": "warn",
					"options": {
						"conventions": [
							{
								"selector": {
									"kind": "objectLiteralMember", // Ignore object literals to make it easier to integrate with third-party libraries that use different naming conventions.
									"scope": "any"
								},
								"match": ".*"
							}
						]
					}
				},
				"useNodeAssertStrict": "warn",
				"useNodejsImportProtocol": "warn",
				"useNumberNamespace": "warn",
				"useNumericSeparators": "warn",
				"useObjectSpread": "warn",
				"useReadonlyClassProperties": "warn",
				"useSelfClosingElements": "warn",
				"useShorthandAssign": "warn",
				"useShorthandFunctionType": "warn",
				"useSingleVarDeclarator": "warn",
				"useSymbolDescription": "warn",
				"useTemplate": "warn",
				"useThrowNewError": "warn",
				"useThrowOnlyError": "warn",
				"useTrimStartEnd": "warn",
				"useUnifiedTypeSignatures": "warn"
			},
			"suspicious": {
				"noAlert": "warn",
				"noApproximativeNumericConstant": "warn",
				"noArrayIndexKey": "warn",
				"noAssignInExpressions": "warn",
				"noAsyncPromiseExecutor": "warn",
				"noBiomeFirstException": "warn",
				"noBitwiseOperators": "warn",
				"noCatchAssign": "warn",
				"noClassAssign": "warn",
				"noCommentText": "warn",
				"noCompareNegZero": "warn",
				"noConfusingLabels": "warn",
				"noConfusingVoidType": "warn",
				"noConsole": "warn",
				"noConstEnum": "warn",
				"noConstantBinaryExpressions": "warn",
				"noControlCharactersInRegex": "warn",
				"noDebugger": "warn",
				"noDocumentCookie": "warn",
				"noDocumentImportInPage": "warn",
				"noDoubleEquals": "warn",
				"noDuplicateAtImportRules": "warn",
				"noDuplicateCase": "warn",
				"noDuplicateClassMembers": "warn",
				"noDuplicateCustomProperties": "warn",
				"noDuplicateElseIf": "warn",
				"noDuplicateFields": "warn",
				"noDuplicateFontNames": "warn",
				"noDuplicateJsxProps": "warn",
				"noDuplicateObjectKeys": "warn",
				"noDuplicateParameters": "warn",
				"noDuplicateProperties": "warn",
				"noDuplicateSelectorsKeyframeBlock": "warn",
				"noDuplicateTestHooks": "off", // Not applicable outside unit tests.
				"noEmptyBlock": "warn",
				"noEmptyBlockStatements": "warn",
				"noEmptyInterface": "warn",
				"noEvolvingTypes": "warn",
				"noExplicitAny": "warn",
				"noExportsInTest": "off", // Not applicable outside unit tests.
				"noExtraNonNullAssertion": "warn",
				"noFallthroughSwitchClause": "warn",
				"noFocusedTests": "off", // Not applicable outside unit tests.
				"noFunctionAssign": "warn",
				"noGlobalAssign": "warn",
				"noGlobalIsFinite": "warn",
				"noGlobalIsNan": "warn",
				"noHeadImportInDocument": "warn",
				"noImplicitAnyLet": "warn",
				"noImportAssign": "warn",
				"noImportantInKeyframe": "warn",
				"noIrregularWhitespace": "warn",
				"noLabelVar": "warn",
				"noMisleadingCharacterClass": "warn",
				"noMisleadingInstantiator": "warn",
				"noMisplacedAssertion": "warn",
				"noMisrefactoredShorthandAssign": "warn",
				"noOctalEscape": "warn",
				"noPrototypeBuiltins": "warn",
				"noQuickfixBiome": "warn",
				"noReactSpecificProps": "warn",
				"noRedeclare": "warn",
				"noRedundantUseStrict": "warn",
				"noSelfCompare": "warn",
				"noShadowRestrictedNames": "warn",
				"noShorthandPropertyOverrides": "warn",
				"noSkippedTests": "warn",
				"noSparseArray": "warn",
				"noSuspiciousSemicolonInJsx": "warn",
				"noTemplateCurlyInString": "warn",
				"noThenProperty": "warn",
				"noTsIgnore": "warn",
				"noUnassignedVariables": "warn",
				"noUnknownAtRules": "warn",
				"noUnsafeDeclarationMerging": "warn",
				"noUnsafeNegation": "warn",
				"noUselessEscapeInString": "warn",
				"noUselessRegexBackrefs": "warn",
				"noVar": "warn",
				"noWith": "warn",
				"useAdjacentOverloadSignatures": "warn",
				"useAwait": "off", // Rely on `Promise<T>` type checks in TypeScript and allow async modifiers on any function to improve maintainability.
				"useBiomeIgnoreFolder": "warn",
				"useDefaultSwitchClauseLast": "warn",
				"useErrorMessage": "warn",
				"useGetterReturn": "warn",
				"useGoogleFontDisplay": "warn",
				"useGuardForIn": "warn",
				"useIsArray": "warn",
				"useIterableCallbackReturn": "off", // Rely on type checks in TypeScript to avoid false positives.
				"useNamespaceKeyword": "warn",
				"useNumberToFixedDigitsArgument": "warn",
				"useStaticResponseMethods": "warn",
				"useStrictMode": "warn"
			},
			//
			// Opt in to nursery rules one by one to avoid unintentional breaking changes
			// from new nursery rules introduced in future releases of Biome and to improve
			// the result of `biome migrate`.
			"nursery": {
				"noDeprecatedImports": "warn",
				"noDuplicateDependencies": "warn",
				"noFloatingPromises": "warn",
				"noImportCycles": "warn",
				"noJsxLiterals": "off", // Prefer HTML-like string literals over JavaScript string expressions in JSX to reduce noise and improve readability.
				"noMisusedPromises": "warn",
				"noNextAsyncClientComponent": "off", // Not applicable outside Next.js.
				"noNonNullAssertedOptionalChain": "warn",
				"noQwikUseVisibleTask": "off", // Not applicable outside Qwik.
				"noReactForwardRef": "off", // Not applicable outside React.
				"noSecrets": "off", // Allow regular non-secret strings with high entropy.
				"noShadow": "warn",
				"noUnnecessaryConditions": "off", // Avoid false positives in switch statements and mutable variables.
				"noUnresolvedImports": "off", // Rely on module import checks in TypeScript.
				"noUnusedExpressions": "warn",
				"noUselessCatchBinding": "warn",
				"noUselessUndefined": "warn",
				"noVueDataObjectDeclaration": "off", // Not applicable outside Vue.
				"noVueDuplicateKeys": "off", // Not applicable outside Vue.
				"noVueReservedKeys": "off", // Not applicable outside Vue.
				"noVueReservedProps": "off", // Not applicable outside Vue.
				"useAnchorHref": "warn",
				"useConsistentArrowReturn": "warn",
				"useConsistentTypeDefinitions": {
					"level": "warn",
					"options": {
						"style": "type" // Prefer the type alias syntax to improve flexibility regarding union types, intersection types, and generic wrappers such as `Readonly<T>` and `Partial<T>`.
					}
				},
				"useExhaustiveSwitchCases": "warn",
				"useExplicitType": "warn",
				"useImageSize": "warn",
				"useMaxParams": "warn",
				"useQwikClasslist": "off", // Not applicable outside Qwik.
				"useReactFunctionComponents": "warn",
				"useSortedClasses": {
					"level": "warn",
					"fix": "safe", // Let Biome sort Tailwind CSS classes automatically.
					"options": {
						"functions": ["clsx", "cn", "cva", "cx", "tw", "tw.*"]
					}
				},
				"useVueMultiWordComponentNames": "off" // Not applicable outside Vue.
			}
		}
	},
	"overrides": [
		{
			// Ambient TypeScript modules (i.e. type declaration files).
			"includes": ["src/**/*.d.ts"],
			"linter": {
				"rules": {
					"style": {
						"useNamingConvention": {
							"level": "warn",
							"options": {
								"conventions": [
									{
										"selector": {
											"kind": "typeProperty", // Ignore properties to make it easier to integrate with third-party libraries that use different naming conventions.
											"scope": "any"
										},
										"match": ".*"
									}
								],
								"strictCase": false // Allow consecutive uppercase letters to make it easier to integrate with third-party libraries that use different naming conventions.
							}
						}
					},
					"nursery": {
						"useConsistentTypeDefinitions": "off" // Allow interfaces for type declaration merging.
					}
				}
			}
		},
		{
			// Configuration files in Node.js- and ESM-based toolchains.
			"includes": ["*.config.{js,ts}"],
			"linter": {
				"rules": {
					"correctness": {
						"noNodejsModules": "off", // Allow importing Node.js-specific modules such as `node:path` and `node:url` in configuration files.
						"noUndeclaredDependencies": {
							"level": "warn",
							"options": {
								"devDependencies": true // Allow importing development-only dependencies in configuration files.
							}
						}
					},
					"performance": {
						"useTopLevelRegex": "off" // Allow regex literals anywhere in configuration files to improve readability.
					},
					"style": {
						"noDefaultExport": "off", // Allow default exports in configuration files.
						"useFilenamingConvention": {
							"level": "warn",
							"options": {
								"filenameCases": ["kebab-case"] // Allow the kebab-case naming convention motivated by the `.config.{js,ts}` extension.
							}
						},
						"noProcessEnv": "off" // Allow access to environment variables in configuration files.
					}
				}
			}
		}
	]
}
