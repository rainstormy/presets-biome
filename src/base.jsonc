{
	"$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
	"files": {
		"ignore": [".idea/", "node_modules/"]
	},
	"css": {
		"formatter": {
			"enabled": true
		},
		"linter": {
			"enabled": true
		}
	},
	"javascript": {
		"formatter": {
			"semicolons": "asNeeded" // Utilise Automatic Semicolon Insertion (ASI) which is always present in JavaScript.
		}
	},
	"linter": {
		"rules": {
			"all": true,
			"correctness": {
				"noUndeclaredDependencies": "off", // Await support for path aliases from `tsconfig.json`.
				"useExhaustiveDependencies": "off" // Not applicable outside React apps.
			},
			"style": {
				"noImplicitBoolean": "off", // Prefer HTML-like boolean props in JSX.
				"useConsistentArrayType": {
					"level": "error",
					"options": { "syntax": "generic" } // Prefer `Array<T>` to remain consistent with the built-in types for `Set<T>` and `Map<K, V>`.
				},
				"useDefaultSwitchClause": "off", // Utilise union exhaustiveness checking in TypeScript.
				"useFilenamingConvention": {
					"level": "error",
					"options": {
						"filenameCases": ["PascalCase"] // Prefer PascalCase as the only naming convention to keep filenames simple and consistent.
					}
				},
				"useNamingConvention": {
					"level": "error",
					"options": {
						"conventions": [
							{
								"selector": {
									"kind": "objectLiteralMember", // Ignore object literals for third-party compatibility reasons.
									"scope": "any"
								},
								"match": ".*"
							}
						]
					}
				},
				"useShorthandArrayType": "off" // Superseded by `lint/style/useConsistentArrayType`.
			},
			"suspicious": {
				"useAwait": "off" // Allow async modifiers on any function for consistency and to improve maintainability. TypeScript is able to detect incorrect use of the resulting promises.
			},
			// Opt in to nursery rules one by one to avoid unintentional breaking changes
			// from new nursery rules introduced in future releases of Biome.
			"nursery": {
				"noCommonJs": "warn",
				"noDescendingSpecificity": "warn",
				"noDocumentCookie": "warn",
				"noDocumentImportInPage": "warn",
				"noDuplicateCustomProperties": "warn",
				"noDuplicatedFields": "warn",
				"noDuplicateElseIf": "warn",
				"noDuplicateProperties": "warn",
				"noDynamicNamespaceImportAccess": "warn",
				"noEnum": "warn",
				"noExportedImports": "warn",
				"noHeadElement": "warn",
				"noHeadImportInDocument": "warn",
				"noImgElement": "warn",
				"noIrregularWhitespace": "warn",
				"noMissingVarFunction": "warn",
				"noNestedTernary": "warn",
				"noOctalEscape": "warn",
				"noProcessEnv": "warn",
				"noRestrictedImports": "warn",
				"noRestrictedTypes": "warn",
				"noSecrets": "off", // Await mitigation of false positives.
				"noStaticElementInteractions": "warn",
				"noSubstr": "warn",
				"noTemplateCurlyInString": "warn",
				"noUnknownPseudoClass": "warn",
				"noUnknownPseudoElement": "warn",
				"noUnknownTypeSelector": "warn",
				"noUselessEscapeInRegex": "warn",
				"noUselessStringRaw": "warn",
				"noValueAtRule": "warn",
				"useAdjacentOverloadSignatures": "warn",
				"useAriaPropsSupportedByRole": "warn",
				"useAtIndex": "warn",
				"useCollapsedIf": "warn",
				"useComponentExportOnlyModules": "warn",
				"useConsistentCurlyBraces": "off", // Await support for single trailing spaces in curly braces.
				"useConsistentMemberAccessibility": "warn",
				"useDeprecatedReason": "warn",
				"useExplicitType": "warn",
				"useGoogleFontDisplay": "warn",
				"useGuardForIn": "warn",
				"useImportRestrictions": "warn",
				"useSortedClasses": "off", // Await support for screens and customised `tailwind.config.js`.
				"useStrictMode": "warn",
				"useTrimStartEnd": "warn",
				"useValidAutocomplete": "warn"
			}
		}
	},
	"overrides": [
		{
			// Provide support for ambient TypeScript modules (i.e. type declaration files).
			"include": ["src/**/*.d.ts"],
			"linter": {
				"rules": {
					"style": {
						"useNamingConvention": {
							"level": "error",
							"options": {
								"conventions": [
									{
										"selector": {
											"kind": "typeProperty", // Ignore properties for third-party compatibility reasons.
											"scope": "any"
										},
										"match": ".*"
									}
								],
								"strictCase": false // Allow consecutive uppercase letters for third-party compatibility reasons.
							}
						}
					}
				}
			}
		},
		{
			// Provide support for configuration files in a Node.js- and ESM-based toolchain.
			"include": ["*.config.js", "*.config.ts"],
			"linter": {
				"rules": {
					"correctness": {
						"noNodejsModules": "off" // Allow importing Node.js-specific modules such as `node:path` and `node:url` in configuration files.
					},
					"style": {
						"noDefaultExport": "off", // Allow default exports in configuration files.
						"useFilenamingConvention": {
							"level": "error",
							"options": {
								"filenameCases": ["kebab-case"] // Allow the kebab-case naming convention motivated by the `.config.{js,ts}` extension.
							}
						}
					},
					"nursery": {
						"noProcessEnv": "off", // Allow accessing environment variables in configuration files.
						"useImportRestrictions": "off" // Allow relative import statements in configuration files.
					}
				}
			}
		}
	]
}
