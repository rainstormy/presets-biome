{
	"$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
	"files": {
		"ignore": [".idea/", "node_modules/"]
	},
	"css": {
		"formatter": {
			"enabled": true
		},
		"linter": {
			"enabled": true
		}
	},
	"javascript": {
		"formatter": {
			"semicolons": "asNeeded" // Utilise Automatic Semicolon Insertion (ASI) which is always present in JavaScript.
		}
	},
	"linter": {
		"rules": {
			"a11y": {
				"noAccessKey": "warn",
				"noAriaHiddenOnFocusable": "warn",
				"noAriaUnsupportedElements": "warn",
				"noAutofocus": "warn",
				"noBlankTarget": "warn",
				"noDistractingElements": "warn",
				"noHeaderScope": "warn",
				"noInteractiveElementToNoninteractiveRole": "warn",
				"noLabelWithoutControl": "warn",
				"noNoninteractiveElementToInteractiveRole": "warn",
				"noNoninteractiveTabindex": "warn",
				"noPositiveTabindex": "warn",
				"noRedundantAlt": "warn",
				"noRedundantRoles": "warn",
				"noSvgWithoutTitle": "warn",
				"useAltText": "warn",
				"useAnchorContent": "warn",
				"useAriaActivedescendantWithTabindex": "warn",
				"useAriaPropsForRole": "warn",
				"useButtonType": "warn",
				"useFocusableInteractive": "warn",
				"useGenericFontNames": "warn",
				"useHeadingContent": "warn",
				"useHtmlLang": "warn",
				"useIframeTitle": "warn",
				"useKeyWithClickEvents": "warn",
				"useKeyWithMouseEvents": "warn",
				"useMediaCaption": "warn",
				"useSemanticElements": "warn",
				"useValidAnchor": "warn",
				"useValidAriaProps": "warn",
				"useValidAriaRole": "warn",
				"useValidAriaValues": "warn",
				"useValidLang": "warn"
			},
			"complexity": {
				"noBannedTypes": "warn",
				"noEmptyTypeParameters": "warn",
				"noExcessiveCognitiveComplexity": "warn",
				"noExcessiveNestedTestSuites": "warn",
				"noExtraBooleanCast": "warn",
				"noForEach": "warn",
				"noMultipleSpacesInRegularExpressionLiterals": "warn",
				"noStaticOnlyClass": "warn",
				"noThisInStatic": "warn",
				"noUselessCatch": "warn",
				"noUselessConstructor": "warn",
				"noUselessEmptyExport": "warn",
				"noUselessFragments": "warn",
				"noUselessLabel": "warn",
				"noUselessLoneBlockStatements": "warn",
				"noUselessRename": "warn",
				"noUselessStringConcat": "warn",
				"noUselessSwitchCase": "warn",
				"noUselessTernary": "warn",
				"noUselessThisAlias": "warn",
				"noUselessTypeConstraint": "warn",
				"noUselessUndefinedInitialization": "warn",
				"noVoid": "warn",
				"noWith": "warn",
				"useArrowFunction": "warn",
				"useDateNow": "warn",
				"useFlatMap": "warn",
				"useLiteralKeys": "warn",
				"useOptionalChain": "warn",
				"useRegexLiterals": "warn",
				"useSimpleNumberKeys": "warn",
				"useSimplifiedLogicExpression": "warn"
			},
			"correctness": {
				"noChildrenProp": "warn",
				"noConstAssign": "warn",
				"noConstantCondition": "warn",
				"noConstantMathMinMaxClamp": "warn",
				"noConstructorReturn": "warn",
				"noEmptyCharacterClassInRegex": "warn",
				"noEmptyPattern": "warn",
				"noFlatMapIdentity": "warn",
				"noGlobalObjectCalls": "warn",
				"noInnerDeclarations": "warn",
				"noInvalidBuiltinInstantiation": "warn",
				"noInvalidConstructorSuper": "warn",
				"noInvalidDirectionInLinearGradient": "warn",
				"noInvalidGridAreas": "warn",
				"noInvalidNewBuiltin": "warn",
				"noInvalidPositionAtImportRule": "warn",
				"noInvalidUseBeforeDeclaration": "warn",
				"noNewSymbol": "warn",
				"noNodejsModules": "warn",
				"noNonoctalDecimalEscape": "warn",
				"noPrecisionLoss": "warn",
				"noRenderReturnValue": "warn",
				"noSelfAssign": "warn",
				"noSetterReturn": "warn",
				"noStringCaseMismatch": "warn",
				"noSwitchDeclarations": "warn",
				"noUndeclaredDependencies": "off", // Await support for path aliases from `tsconfig.json`.
				"noUndeclaredVariables": "warn",
				"noUnknownFunction": "warn",
				"noUnknownMediaFeatureName": "warn",
				"noUnknownProperty": "warn",
				"noUnknownUnit": "warn",
				"noUnmatchableAnbSelector": "warn",
				"noUnnecessaryContinue": "warn",
				"noUnreachable": "warn",
				"noUnreachableSuper": "warn",
				"noUnsafeFinally": "warn",
				"noUnsafeOptionalChaining": "warn",
				"noUnusedFunctionParameters": "warn",
				"noUnusedImports": "warn",
				"noUnusedLabels": "warn",
				"noUnusedPrivateClassMembers": "warn",
				"noUnusedVariables": "warn",
				"noVoidElementsWithChildren": "warn",
				"noVoidTypeReturn": "warn",
				"useArrayLiterals": "warn",
				"useExhaustiveDependencies": "off", // Not applicable outside React apps.
				"useHookAtTopLevel": "warn",
				"useImportExtensions": "warn",
				"useIsNan": "warn",
				"useJsxKeyInIterable": "warn",
				"useValidForDirection": "warn",
				"useYield": "warn"
			},
			"performance": {
				"noAccumulatingSpread": "warn",
				"noBarrelFile": "warn",
				"noDelete": "warn",
				"noReExportAll": "warn",
				"useTopLevelRegex": "warn"
			},
			"security": {
				"noDangerouslySetInnerHtml": "warn",
				"noDangerouslySetInnerHtmlWithChildren": "warn",
				"noGlobalEval": "warn"
			},
			"style": {
				"noArguments": "warn",
				"noCommaOperator": "warn",
				"noDefaultExport": "warn",
				"noDoneCallback": "warn",
				"noImplicitBoolean": "off", // Prefer HTML-like boolean props in JSX.
				"noInferrableTypes": "warn",
				"noNamespace": "warn",
				"noNamespaceImport": "warn",
				"noNegationElse": "warn",
				"noNonNullAssertion": "warn",
				"noParameterAssign": "warn",
				"noParameterProperties": "warn",
				"noRestrictedGlobals": "warn",
				"noShoutyConstants": "warn",
				"noUnusedTemplateLiteral": "warn",
				"noUselessElse": "warn",
				"noVar": "warn",
				"noYodaExpression": "warn",
				"useAsConstAssertion": "warn",
				"useBlockStatements": "warn",
				"useCollapsedElseIf": "warn",
				"useConsistentArrayType": {
					"level": "warn",
					"options": { "syntax": "generic" } // Prefer `Array<T>` to remain consistent with the built-in types for `Set<T>` and `Map<K, V>`.
				},
				"useConsistentBuiltinInstantiation": "warn",
				"useConst": "warn",
				"useDefaultParameterLast": "warn",
				"useDefaultSwitchClause": "off", // Utilise union exhaustiveness checking in TypeScript.
				"useEnumInitializers": "warn",
				"useExplicitLengthCheck": "warn",
				"useExponentiationOperator": "warn",
				"useExportType": "warn",
				"useFilenamingConvention": {
					"level": "warn",
					"options": {
						"filenameCases": ["PascalCase"] // Prefer PascalCase as the only naming convention to keep filenames simple and consistent.
					}
				},
				"useForOf": "warn",
				"useFragmentSyntax": "warn",
				"useImportType": "warn",
				"useLiteralEnumMembers": "warn",
				"useNamingConvention": {
					"level": "warn",
					"options": {
						"conventions": [
							{
								"selector": {
									"kind": "objectLiteralMember", // Ignore object literals for third-party compatibility reasons.
									"scope": "any"
								},
								"match": ".*"
							}
						]
					}
				},
				"useNodeAssertStrict": "warn",
				"useNodejsImportProtocol": "warn",
				"useNumberNamespace": "warn",
				"useNumericLiterals": "warn",
				"useSelfClosingElements": "warn",
				"useShorthandArrayType": "off", // Superseded by `lint/style/useConsistentArrayType`.
				"useShorthandAssign": "warn",
				"useShorthandFunctionType": "warn",
				"useSingleCaseStatement": "warn",
				"useSingleVarDeclarator": "warn",
				"useTemplate": "warn",
				"useThrowNewError": "warn",
				"useThrowOnlyError": "warn",
				"useWhile": "warn"
			},
			"suspicious": {
				"noApproximativeNumericConstant": "warn",
				"noArrayIndexKey": "warn",
				"noAssignInExpressions": "warn",
				"noAsyncPromiseExecutor": "warn",
				"noCatchAssign": "warn",
				"noClassAssign": "warn",
				"noCommentText": "warn",
				"noCompareNegZero": "warn",
				"noConfusingLabels": "warn",
				"noConfusingVoidType": "warn",
				"noConsole": "warn",
				"noConsoleLog": "off", // Deprecated.
				"noConstEnum": "warn",
				"noControlCharactersInRegex": "warn",
				"noDebugger": "warn",
				"noDoubleEquals": "warn",
				"noDuplicateAtImportRules": "warn",
				"noDuplicateCase": "warn",
				"noDuplicateClassMembers": "warn",
				"noDuplicateFontNames": "warn",
				"noDuplicateJsxProps": "warn",
				"noDuplicateObjectKeys": "warn",
				"noDuplicateParameters": "warn",
				"noDuplicateSelectorsKeyframeBlock": "warn",
				"noDuplicateTestHooks": "warn",
				"noEmptyBlock": "warn",
				"noEmptyBlockStatements": "warn",
				"noEmptyInterface": "warn",
				"noEvolvingTypes": "warn",
				"noExplicitAny": "warn",
				"noExportsInTest": "warn",
				"noExtraNonNullAssertion": "warn",
				"noFallthroughSwitchClause": "warn",
				"noFocusedTests": "warn",
				"noFunctionAssign": "warn",
				"noGlobalAssign": "warn",
				"noGlobalIsFinite": "warn",
				"noGlobalIsNan": "warn",
				"noImplicitAnyLet": "warn",
				"noImportAssign": "warn",
				"noImportantInKeyframe": "warn",
				"noLabelVar": "warn",
				"noMisleadingCharacterClass": "warn",
				"noMisleadingInstantiator": "warn",
				"noMisplacedAssertion": "warn",
				"noMisrefactoredShorthandAssign": "warn",
				"noPrototypeBuiltins": "warn",
				"noReactSpecificProps": "warn",
				"noRedeclare": "warn",
				"noRedundantUseStrict": "warn",
				"noSelfCompare": "warn",
				"noShadowRestrictedNames": "warn",
				"noShorthandPropertyOverrides": "warn",
				"noSkippedTests": "warn",
				"noSparseArray": "warn",
				"noSuspiciousSemicolonInJsx": "warn",
				"noThenProperty": "warn",
				"noUnsafeDeclarationMerging": "warn",
				"noUnsafeNegation": "warn",
				"useAwait": "off", // Allow async modifiers on any function for consistency and to improve maintainability. TypeScript is able to detect incorrect use of the resulting promises.
				"useDefaultSwitchClauseLast": "warn",
				"useErrorMessage": "warn",
				"useGetterReturn": "warn",
				"useIsArray": "warn",
				"useNamespaceKeyword": "warn",
				"useNumberToFixedDigitsArgument": "warn",
				"useValidTypeof": "warn"
			},
			// Opt in to nursery rules one by one to avoid unintentional breaking changes
			// from new nursery rules introduced in future releases of Biome.
			"nursery": {
				"noCommonJs": "warn",
				"noDescendingSpecificity": "warn",
				"noDocumentCookie": "warn",
				"noDocumentImportInPage": "warn",
				"noDuplicateCustomProperties": "warn",
				"noDuplicatedFields": "warn",
				"noDuplicateElseIf": "warn",
				"noDuplicateProperties": "warn",
				"noDynamicNamespaceImportAccess": "warn",
				"noEnum": "warn",
				"noExportedImports": "warn",
				"noHeadElement": "warn",
				"noHeadImportInDocument": "warn",
				"noImgElement": "warn",
				"noIrregularWhitespace": "warn",
				"noMissingVarFunction": "warn",
				"noNestedTernary": "off", // Superseded by `lint/complexity/noExcessiveCognitiveComplexity`.
				"noOctalEscape": "warn",
				"noProcessEnv": "warn",
				"noRestrictedImports": "warn",
				"noRestrictedTypes": "warn",
				"noSecrets": "off", // Await mitigation of false positives.
				"noStaticElementInteractions": "warn",
				"noSubstr": "warn",
				"noTemplateCurlyInString": "warn",
				"noUnknownPseudoClass": "warn",
				"noUnknownPseudoElement": "warn",
				"noUnknownTypeSelector": "warn",
				"noUselessEscapeInRegex": "warn",
				"noUselessStringRaw": "warn",
				"noValueAtRule": "warn",
				"useAdjacentOverloadSignatures": "warn",
				"useAriaPropsSupportedByRole": "warn",
				"useAtIndex": "warn",
				"useCollapsedIf": "warn",
				"useComponentExportOnlyModules": "warn",
				"useConsistentCurlyBraces": "off", // Await support for single trailing spaces in curly braces.
				"useConsistentMemberAccessibility": "warn",
				"useDeprecatedReason": "warn",
				"useExplicitType": "warn",
				"useGoogleFontDisplay": "warn",
				"useGuardForIn": "warn",
				"useImportRestrictions": "warn",
				"useSortedClasses": "off", // Await support for screens and customised `tailwind.config.js`.
				"useStrictMode": "warn",
				"useTrimStartEnd": "warn",
				"useValidAutocomplete": "warn"
			}
		}
	},
	"overrides": [
		{
			// Provide support for ambient TypeScript modules (i.e. type declaration files).
			"include": ["src/**/*.d.ts"],
			"linter": {
				"rules": {
					"style": {
						"useNamingConvention": {
							"level": "warn",
							"options": {
								"conventions": [
									{
										"selector": {
											"kind": "typeProperty", // Ignore properties for third-party compatibility reasons.
											"scope": "any"
										},
										"match": ".*"
									}
								],
								"strictCase": false // Allow consecutive uppercase letters for third-party compatibility reasons.
							}
						}
					}
				}
			}
		},
		{
			// Provide support for configuration files in a Node.js- and ESM-based toolchain.
			"include": ["*.config.js", "*.config.ts"],
			"linter": {
				"rules": {
					"correctness": {
						"noNodejsModules": "off" // Allow importing Node.js-specific modules such as `node:path` and `node:url` in configuration files.
					},
					"style": {
						"noDefaultExport": "off", // Allow default exports in configuration files.
						"useFilenamingConvention": {
							"level": "warn",
							"options": {
								"filenameCases": ["kebab-case"] // Allow the kebab-case naming convention motivated by the `.config.{js,ts}` extension.
							}
						}
					},
					"nursery": {
						"noProcessEnv": "off", // Allow accessing environment variables in configuration files.
						"useImportRestrictions": "off" // Allow relative import statements in configuration files.
					}
				}
			}
		}
	]
}
